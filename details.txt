I am creating an auction website that utilizes html pages combined with a python flask file used to connect them all. The python file needs to create multiple data tables created from .csv files, and every .csv file has a header row. The first is user_data, which contains the fields email' and 'password' which can be gathered from Users.csv, and each password must be securely hashed when inserted into the data table. user_data should also include all columns from Credit_Cards.csv, and can be matched up using the Owner_email column of Credit_Cards.csv and the email column from Users.csv. user_data should also include the columns from Bidders.csv, which can be matched up using the email column from Bidders.csv and the email column from User.csv. The user_data should also include all columns from Address.csv, which can be matched up using address_id from Address.csv, and the home_address_id from Bidders.csv which should now be a part of user_data. user_data should also include all columns from Zipcode_Info.csv, which can be matched up using zipcode from Address.csv which should now already be included, and zipcode from Zipcode_Info.csv.

Our next data table should be auction_data, which should includes all columns from Auction_Listings.csv.  There should be another data table called sellers_data which contains all columns from Sellers.csv. Another data table should be created called categories which contains every column from Categories.csv. There should be another data table called vendors_data which contains everything from Local_Vendors.csv. There should be another data table called bids_data which contains everything from Bids.csv.

The website should begin with a login page where the user types their email and password in, with the password censored as they type. They also must select whether they are loggin in as a bidder or a seller. The login form should be centered on the page. If they choose bidder, the information they type in is cross-referenced against the emails and the hashed passwords in the user_data table. The entered password must be hashed the same way as the passwords stored in user_data in order to properly check if they are the same. If the credentials match up with ones in the user_data table, the user is logged in as a bidder, if not a message is shown saying their email or password was incorrect. If the user chooses to log in as seller, their email is checked against the email column in the sellers_data table, and if it is found, they are then put through the same login process as before, checking their email and password against the user_data file.

Once logged in as a bidder, the user will be presented with a page showing all the info from user_data that matched their email in a neat, organized fashion. They will now have two options, to go to a page showing their bids, or to search for bids by selecting a category. The options for categories they can select should be gathered from the categories data table. Once they have selected a category, they should have the option to select a subcategory of the selected category. If they select a subcategory, it will return all auctions that match that subcategory using the Category column in the auction_data table. If they don't select a subcategory, then it will show all auctions with the original category selected, found in the Category column of the auction_data table. It will only display the Product_Name of each product in auction_data that has a Category field matching the category/subcategory selected. The user can scroll through the auctions matching the category/subcategory they selected, and can click on one that interests them. Clicking on the product name of the auction that interests them will take them to a new page where the Product_Name, Product_Description, Quantity, and Seller_Email are presented in a neat, organized fashion. From here the user can place a bid by typing a number and pressing "Place Bid". This will create a new row in the bids_data table with a new Bid_ID that isn't already in the bids_data table. Before creating the new bid in bids_data, a few conditions must be met. The system must check for bids already placed for that item, this can be checked by matching the Listing_ID in bids_data with the Listing_ID in auction_data. If there are bids already placed on this item, the new bid must be at least 1 unit higher than the highest Bid_Price already found in bids_data for that item. The bid they typed in must also not exceed the Max_bids number found in the auction_data table for that item. The person may not place a bid if the highest bid already placed on the item was placed by themselves. If these conditions are met, a new row is created containing a new, unused Bid_ID, the Seller_Email and the Listing_ID for the item both found in auction_data, the email of the bidder, which is the user currently logged in, and the price they've typed in, assuming it has met the requirements.

The other option once a user is logged in as a bidder is to check their bids. This takes them to a new page where every bid from bids_data where Bidder_Email matches the email of the user logged in is displayed in a neat, organized fashion. Clicking on the Listing_ID of any bid takes them to the same page described before, where they can place a bid if they chose, and the conditions are met.

When logged in as a seller, the user has different options. There should be an option to create a new auction which takes them to a separate page, or an option to view their listings. If they click on the creating a new auction button, they will be taken to a page where they have to fill in the following fields for a new row in the auction_data table: Category, Auction_Title, Product_Name, Product_Description, Quantity, Reserve_Price, Max_bids. The Seller_Email column should automatically be filled with the email from the logged in user, and a new Listing_ID that is not already in use should be created. The fields they've typed in should be used to fill the columns that have the same name. If they instead choose the option to view their listings, they will be taken to a new page that displays every row from auction_data where the Seller_Email matches the email they are logged-in with. Each of the listings should have a Remove button next to it, and clicking this button will remove all values from auction_data except for Auction_Title which it will change to read "Removed".

Write html code for each page described, and a python file that uses flask to make the website work as described.

ï»¿